app: url-shortener
service: ${self:app}-api

frameworkVersion: '2'
useDotenv: true
unresolvedVariablesNotificationMode: error
variablesResolutionMode: 20210326
disabledDeprecations:
  - LAMBDA_HASHING_VERSION_V2

plugins:
  - serverless-domain-manager

provider:
  name: aws
  runtime: python3.8
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    BUCKET_NAME: "${self:custom.bucketName}"
    TABLE_NAME: "${self:custom.tableName}"
  apiGateway:
    shouldStartNameWithService: true
    request:
      schemas:
        create-url-public-model:
          name: CreateUrlPublic
          schema: ${file(models/create-url-public.schema.json)}
        create-url-model:
          name: CreateUrl
          schema: ${file(models/create-url.schema.json)}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:PutObject"
            - "s3:DeleteObject"
          Resource: "arn:aws:s3:::${self:custom.bucketName}/*"
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Query"
          Resource: "arn:aws:dynamodb:*:*:table/${self:custom.tableName}"

custom:
  stacks:
    dev: dev
    v1: pro
    v2: pro
  stack: ${self:custom.stacks.${self:provider.stage}}
  bucketName: ${cf:${self:app}-resources-${self:custom.stack}.RedirectBucketName}
  tableName: ${cf:${self:app}-resources-${self:custom.stack}.DynamoDBTableName}
  customDomain:
    domainName: api.${cf:${self:app}-dns.RootDomain}
    certificateArn: ${env:CERTIFICATE_ARN}
    basePath: ${self:provider.stage}
    createRoute53Record: true

package:
  patterns:
    - '!**/*'
    - src/api.py
    - src/repo.py
    - src/validators.py

functions:
  shorten:
    handler: src/api.shorten_url
    events:
      - http:
          path: /public/urls
          integration: lambda
          method: post
          cors: true
          request:
            schemas:
              application/json: create-url-model
            template:
              application/x-www-form-urlencoded: null
              application/json: '{ "url" : "$input.path("$.url")" }'
            passThrough: NEVER
          response:
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: '(Path|URL).*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
              500:
                pattern: 'An error occurred.*when calling.*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
      - http:
          path: /urls
          integration: lambda
          method: post
          cors: true
          request:
            schemas:
              application/json: create-url-model
            template:
              application/x-www-form-urlencoded: null
              application/json: '{
                "url" : "$input.path("$.url")",
                "custom_path" : "$input.path("$.custom_path")",
                "user": "$context.authorizer.claims.email"
              }'
            passThrough: NEVER
          response:
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: '(Path|URL).*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
              500:
                pattern: 'An error occurred.*when calling.*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: "${cf:${self:app}-resources-${self:custom.stack}.UserPoolArn}"
  list:
    handler: src/api.list_urls
    description: List the URLs created by the current user
    events:
      - http:
          path: /urls
          integration: lambda
          method: get
          cors: true
          request:
            template:
              application/x-www-form-urlencoded: null
              application/json: '{ "user": "$context.authorizer.claims.email" }'
          response:
            statusCodes:
              200:
                pattern: ''
              500:
                pattern: 'An error occurred.*when calling.*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: "${cf:${self:app}-resources-${self:custom.stack}.UserPoolArn}"
  delete:
    handler: src/api.delete_url
    description: Delete the specified URL if created by the current user
    events:
      - http:
          path: /urls/{path}
          integration: lambda
          method: delete
          cors: true
          request:
            template:
              application/x-www-form-urlencoded: null
              application/json: '{
                "path": "$input.params().path.get("path")",
                "user": "$context.authorizer.claims.email"
              }'
          response:
            statusCodes:
              200:
                pattern: ''
                template: '{}'
              403:
                pattern: 'forbidden'
                template: '{}'
              500:
                pattern: 'An error occurred.*when calling.*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: "${cf:${self:app}-resources-${self:custom.stack}.UserPoolArn}"
