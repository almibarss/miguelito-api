service: url-shortener

useDotenv: true

frameworkVersion: '2'

custom:
  bucketName: migueli.to

provider:
  name: aws
  runtime: python3.8
  region: eu-west-1
  stage: dev
  environment:
    BUCKET_NAME: "${self:custom.bucketName}"
  apiGateway:
    shouldStartNameWithService: true
    request:
      schemas:
        shorten-model:
          name: Shorten
          schema: ${file(schema/shorten.schema.json)}
        shorten-custom-model:
          name: ShortenCustom
          schema: ${file(schema/shorten-custom.schema.json)}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
          Resource: "arn:aws:s3:::${self:custom.bucketName}/*"

package:
  include:
    - src/api.py
    - src/validators.py
  exclude:
    - '**/*'

functions:
  shorten:
    handler: src/api.handle
    events:
      - http:
          path: /shorten
          method: post
          cors: true
          request:
            schemas:
              application/x-www-form-urlencoded: shorten-model
      - http:
          path: /shorten-custom
          method: post
          cors: true
          request:
            schemas:
              application/x-www-form-urlencoded: shorten-custom-model
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

resources:
  Resources:
    ServerlessRedirectS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
    ServerlessRedirectS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:custom.bucketName}
        PolicyDocument:
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: "Allow"
              Resource:
                - arn:aws:s3:::${self:custom.bucketName}/*
              Principal: "*"
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: miguelito-users
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: miguelito-web
        GenerateSecret: false
        UserPoolId:
          Ref: CognitoUserPool
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - openid
        CallbackURLs:
          - http://localhost:8080
        LogoutURLs:
          - http://localhost:8080/logout.html
        SupportedIdentityProviders:
          - Google
    CognitoUserPoolIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        ProviderName: Google
        AttributeMapping:
          email: email
          given_name: given_name
        ProviderDetails:
          client_id: ${env:GOOGLE_APP_ID}.apps.googleusercontent.com
          client_secret: ${env:GOOGLE_APP_SECRET}
          authorize_scopes: email openid profile
        ProviderType: Google
        UserPoolId:
          Ref: CognitoUserPool
  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool
    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
